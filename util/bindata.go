// Code generated by go-bindata.
// sources:
// www/00default.css
// www/00initialize.js
// www/20jump.js
// www/20lazyimg.js
// www/20localtime.js
// www/20popup.js
// www/20responce.js
// www/20tagedit.js
// www/20textarea.js
// www/21resanchor.js
// www/40recform.js
// www/41postadvanced.js
// www/arazuki_saku.png
// www/bootstrap/css/bootstrap.min.css
// www/bootstrap/fonts/glyphicons-halflings-regular.eot
// www/bootstrap/fonts/glyphicons-halflings-regular.svg
// www/bootstrap/fonts/glyphicons-halflings-regular.ttf
// www/bootstrap/fonts/glyphicons-halflings-regular.woff
// www/bootstrap/js/bootstrap.min.js
// www/extensions/20imgpopup.js
// www/extensions/20imgspoiler.js
// www/extensions/20localtime.js
// www/extensions/30addlinks.js
// www/extensions/30admin.js
// www/extensions/30filename.js
// www/extensions/30filterlink.js
// www/extensions/30idres.js
// www/extensions/30ytplayer.js
// www/extensions/40incfilter.js
// www/extensions/40textarea.js
// www/extensions/README
// www/favicon.ico
// www/gou.png
// www/jquery/MIT-LICENSE.txt
// www/jquery/jquery.lazy.min.js
// www/jquery/jquery.min.js
// www/jquery/spoiler/authors.txt
// www/jquery/spoiler/spoiler.min.js
// www/rss1.xsl
// www/x.gif
// file/initnode.txt
// file/message-en.txt
// file/message-ja.txt
// file/motd.txt
// file/node_allow.txt
// file/node_deny.txt
// file/saku.ini
// file/spam.txt
// gou_template/2ch_error.txt
// gou_template/delete_file.txt
// gou_template/delete_record.txt
// gou_template/edit_tag.txt
// gou_template/footer.txt
// gou_template/gateway_link.txt
// gou_template/header.txt
// gou_template/index_list.txt
// gou_template/jump.txt
// gou_template/list_item.txt
// gou_template/menubar.txt
// gou_template/new_element_form.txt
// gou_template/page_navi.txt
// gou_template/paragraph.txt
// gou_template/post_form.txt
// gou_template/record.txt
// gou_template/remove_file_form.txt
// gou_template/rss1.txt
// gou_template/search_form.txt
// gou_template/status.txt
// gou_template/thread_bottom.txt
// gou_template/thread_tags.txt
// gou_template/thread_top.txt
// gou_template/top.txt
// DO NOT EDIT!

package util

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// www00defaultCss reads file data from disk. It returns an error on failure.
func www00defaultCss() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/00default.css"
	name := "www/00default.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www00initializeJs reads file data from disk. It returns an error on failure.
func www00initializeJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/00initialize.js"
	name := "www/00initialize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20jumpJs reads file data from disk. It returns an error on failure.
func www20jumpJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20jump.js"
	name := "www/20jump.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20lazyimgJs reads file data from disk. It returns an error on failure.
func www20lazyimgJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20lazyimg.js"
	name := "www/20lazyimg.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20localtimeJs reads file data from disk. It returns an error on failure.
func www20localtimeJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20localtime.js"
	name := "www/20localtime.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20popupJs reads file data from disk. It returns an error on failure.
func www20popupJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20popup.js"
	name := "www/20popup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20responceJs reads file data from disk. It returns an error on failure.
func www20responceJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20responce.js"
	name := "www/20responce.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20tageditJs reads file data from disk. It returns an error on failure.
func www20tageditJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20tagedit.js"
	name := "www/20tagedit.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www20textareaJs reads file data from disk. It returns an error on failure.
func www20textareaJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/20textarea.js"
	name := "www/20textarea.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www21resanchorJs reads file data from disk. It returns an error on failure.
func www21resanchorJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/21resanchor.js"
	name := "www/21resanchor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www40recformJs reads file data from disk. It returns an error on failure.
func www40recformJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/40recform.js"
	name := "www/40recform.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// www41postadvancedJs reads file data from disk. It returns an error on failure.
func www41postadvancedJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/41postadvanced.js"
	name := "www/41postadvanced.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwArazuki_sakuPng reads file data from disk. It returns an error on failure.
func wwwArazuki_sakuPng() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/arazuki_saku.png"
	name := "www/arazuki_saku.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func wwwBootstrapCssBootstrapMinCss() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/css/bootstrap.min.css"
	name := "www/bootstrap/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func wwwBootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/fonts/glyphicons-halflings-regular.eot"
	name := "www/bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func wwwBootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/fonts/glyphicons-halflings-regular.svg"
	name := "www/bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func wwwBootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	name := "www/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func wwwBootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/fonts/glyphicons-halflings-regular.woff"
	name := "www/bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwBootstrapJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func wwwBootstrapJsBootstrapMinJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/bootstrap/js/bootstrap.min.js"
	name := "www/bootstrap/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions20imgpopupJs reads file data from disk. It returns an error on failure.
func wwwExtensions20imgpopupJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/20imgpopup.js"
	name := "www/extensions/20imgpopup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions20imgspoilerJs reads file data from disk. It returns an error on failure.
func wwwExtensions20imgspoilerJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/20imgspoiler.js"
	name := "www/extensions/20imgspoiler.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions20localtimeJs reads file data from disk. It returns an error on failure.
func wwwExtensions20localtimeJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/20localtime.js"
	name := "www/extensions/20localtime.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30addlinksJs reads file data from disk. It returns an error on failure.
func wwwExtensions30addlinksJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30addlinks.js"
	name := "www/extensions/30addlinks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30adminJs reads file data from disk. It returns an error on failure.
func wwwExtensions30adminJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30admin.js"
	name := "www/extensions/30admin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30filenameJs reads file data from disk. It returns an error on failure.
func wwwExtensions30filenameJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30filename.js"
	name := "www/extensions/30filename.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30filterlinkJs reads file data from disk. It returns an error on failure.
func wwwExtensions30filterlinkJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30filterlink.js"
	name := "www/extensions/30filterlink.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30idresJs reads file data from disk. It returns an error on failure.
func wwwExtensions30idresJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30idres.js"
	name := "www/extensions/30idres.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions30ytplayerJs reads file data from disk. It returns an error on failure.
func wwwExtensions30ytplayerJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/30ytplayer.js"
	name := "www/extensions/30ytplayer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions40incfilterJs reads file data from disk. It returns an error on failure.
func wwwExtensions40incfilterJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/40incfilter.js"
	name := "www/extensions/40incfilter.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensions40textareaJs reads file data from disk. It returns an error on failure.
func wwwExtensions40textareaJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/40textarea.js"
	name := "www/extensions/40textarea.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwExtensionsReadme reads file data from disk. It returns an error on failure.
func wwwExtensionsReadme() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/extensions/README"
	name := "www/extensions/README"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwFaviconIco reads file data from disk. It returns an error on failure.
func wwwFaviconIco() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/favicon.ico"
	name := "www/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwGouPng reads file data from disk. It returns an error on failure.
func wwwGouPng() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/gou.png"
	name := "www/gou.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwJqueryMitLicenseTxt reads file data from disk. It returns an error on failure.
func wwwJqueryMitLicenseTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/jquery/MIT-LICENSE.txt"
	name := "www/jquery/MIT-LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwJqueryJqueryLazyMinJs reads file data from disk. It returns an error on failure.
func wwwJqueryJqueryLazyMinJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/jquery/jquery.lazy.min.js"
	name := "www/jquery/jquery.lazy.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwJqueryJqueryMinJs reads file data from disk. It returns an error on failure.
func wwwJqueryJqueryMinJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/jquery/jquery.min.js"
	name := "www/jquery/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwJquerySpoilerAuthorsTxt reads file data from disk. It returns an error on failure.
func wwwJquerySpoilerAuthorsTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/jquery/spoiler/authors.txt"
	name := "www/jquery/spoiler/authors.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwJquerySpoilerSpoilerMinJs reads file data from disk. It returns an error on failure.
func wwwJquerySpoilerSpoilerMinJs() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/jquery/spoiler/spoiler.min.js"
	name := "www/jquery/spoiler/spoiler.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwRss1Xsl reads file data from disk. It returns an error on failure.
func wwwRss1Xsl() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/rss1.xsl"
	name := "www/rss1.xsl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// wwwXGif reads file data from disk. It returns an error on failure.
func wwwXGif() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/www/x.gif"
	name := "www/x.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileInitnodeTxt reads file data from disk. It returns an error on failure.
func fileInitnodeTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/initnode.txt"
	name := "file/initnode.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileMessageEnTxt reads file data from disk. It returns an error on failure.
func fileMessageEnTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/message-en.txt"
	name := "file/message-en.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileMessageJaTxt reads file data from disk. It returns an error on failure.
func fileMessageJaTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/message-ja.txt"
	name := "file/message-ja.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileMotdTxt reads file data from disk. It returns an error on failure.
func fileMotdTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/motd.txt"
	name := "file/motd.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileNode_allowTxt reads file data from disk. It returns an error on failure.
func fileNode_allowTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/node_allow.txt"
	name := "file/node_allow.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileNode_denyTxt reads file data from disk. It returns an error on failure.
func fileNode_denyTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/node_deny.txt"
	name := "file/node_deny.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileSakuIni reads file data from disk. It returns an error on failure.
func fileSakuIni() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/saku.ini"
	name := "file/saku.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fileSpamTxt reads file data from disk. It returns an error on failure.
func fileSpamTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/file/spam.txt"
	name := "file/spam.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_template2ch_errorTxt reads file data from disk. It returns an error on failure.
func gou_template2ch_errorTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/2ch_error.txt"
	name := "gou_template/2ch_error.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateDelete_fileTxt reads file data from disk. It returns an error on failure.
func gou_templateDelete_fileTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/delete_file.txt"
	name := "gou_template/delete_file.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateDelete_recordTxt reads file data from disk. It returns an error on failure.
func gou_templateDelete_recordTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/delete_record.txt"
	name := "gou_template/delete_record.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateEdit_tagTxt reads file data from disk. It returns an error on failure.
func gou_templateEdit_tagTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/edit_tag.txt"
	name := "gou_template/edit_tag.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateFooterTxt reads file data from disk. It returns an error on failure.
func gou_templateFooterTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/footer.txt"
	name := "gou_template/footer.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateGateway_linkTxt reads file data from disk. It returns an error on failure.
func gou_templateGateway_linkTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/gateway_link.txt"
	name := "gou_template/gateway_link.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateHeaderTxt reads file data from disk. It returns an error on failure.
func gou_templateHeaderTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/header.txt"
	name := "gou_template/header.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateIndex_listTxt reads file data from disk. It returns an error on failure.
func gou_templateIndex_listTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/index_list.txt"
	name := "gou_template/index_list.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateJumpTxt reads file data from disk. It returns an error on failure.
func gou_templateJumpTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/jump.txt"
	name := "gou_template/jump.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateList_itemTxt reads file data from disk. It returns an error on failure.
func gou_templateList_itemTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/list_item.txt"
	name := "gou_template/list_item.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateMenubarTxt reads file data from disk. It returns an error on failure.
func gou_templateMenubarTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/menubar.txt"
	name := "gou_template/menubar.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateNew_element_formTxt reads file data from disk. It returns an error on failure.
func gou_templateNew_element_formTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/new_element_form.txt"
	name := "gou_template/new_element_form.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templatePage_naviTxt reads file data from disk. It returns an error on failure.
func gou_templatePage_naviTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/page_navi.txt"
	name := "gou_template/page_navi.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateParagraphTxt reads file data from disk. It returns an error on failure.
func gou_templateParagraphTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/paragraph.txt"
	name := "gou_template/paragraph.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templatePost_formTxt reads file data from disk. It returns an error on failure.
func gou_templatePost_formTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/post_form.txt"
	name := "gou_template/post_form.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateRecordTxt reads file data from disk. It returns an error on failure.
func gou_templateRecordTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/record.txt"
	name := "gou_template/record.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateRemove_file_formTxt reads file data from disk. It returns an error on failure.
func gou_templateRemove_file_formTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/remove_file_form.txt"
	name := "gou_template/remove_file_form.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateRss1Txt reads file data from disk. It returns an error on failure.
func gou_templateRss1Txt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/rss1.txt"
	name := "gou_template/rss1.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateSearch_formTxt reads file data from disk. It returns an error on failure.
func gou_templateSearch_formTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/search_form.txt"
	name := "gou_template/search_form.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateStatusTxt reads file data from disk. It returns an error on failure.
func gou_templateStatusTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/status.txt"
	name := "gou_template/status.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateThread_bottomTxt reads file data from disk. It returns an error on failure.
func gou_templateThread_bottomTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/thread_bottom.txt"
	name := "gou_template/thread_bottom.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateThread_tagsTxt reads file data from disk. It returns an error on failure.
func gou_templateThread_tagsTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/thread_tags.txt"
	name := "gou_template/thread_tags.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateThread_topTxt reads file data from disk. It returns an error on failure.
func gou_templateThread_topTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/thread_top.txt"
	name := "gou_template/thread_top.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gou_templateTopTxt reads file data from disk. It returns an error on failure.
func gou_templateTopTxt() (*asset, error) {
	path := "/home/dame/ddd/prog/go/src/github.com/shingetsu-gou/shingetsu-gou/gou_template/top.txt"
	name := "gou_template/top.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/00default.css":                                     www00defaultCss,
	"www/00initialize.js":                                   www00initializeJs,
	"www/20jump.js":                                         www20jumpJs,
	"www/20lazyimg.js":                                      www20lazyimgJs,
	"www/20localtime.js":                                    www20localtimeJs,
	"www/20popup.js":                                        www20popupJs,
	"www/20responce.js":                                     www20responceJs,
	"www/20tagedit.js":                                      www20tageditJs,
	"www/20textarea.js":                                     www20textareaJs,
	"www/21resanchor.js":                                    www21resanchorJs,
	"www/40recform.js":                                      www40recformJs,
	"www/41postadvanced.js":                                 www41postadvancedJs,
	"www/arazuki_saku.png":                                  wwwArazuki_sakuPng,
	"www/bootstrap/css/bootstrap.min.css":                   wwwBootstrapCssBootstrapMinCss,
	"www/bootstrap/fonts/glyphicons-halflings-regular.eot":  wwwBootstrapFontsGlyphiconsHalflingsRegularEot,
	"www/bootstrap/fonts/glyphicons-halflings-regular.svg":  wwwBootstrapFontsGlyphiconsHalflingsRegularSvg,
	"www/bootstrap/fonts/glyphicons-halflings-regular.ttf":  wwwBootstrapFontsGlyphiconsHalflingsRegularTtf,
	"www/bootstrap/fonts/glyphicons-halflings-regular.woff": wwwBootstrapFontsGlyphiconsHalflingsRegularWoff,
	"www/bootstrap/js/bootstrap.min.js":                     wwwBootstrapJsBootstrapMinJs,
	"www/extensions/20imgpopup.js":                          wwwExtensions20imgpopupJs,
	"www/extensions/20imgspoiler.js":                        wwwExtensions20imgspoilerJs,
	"www/extensions/20localtime.js":                         wwwExtensions20localtimeJs,
	"www/extensions/30addlinks.js":                          wwwExtensions30addlinksJs,
	"www/extensions/30admin.js":                             wwwExtensions30adminJs,
	"www/extensions/30filename.js":                          wwwExtensions30filenameJs,
	"www/extensions/30filterlink.js":                        wwwExtensions30filterlinkJs,
	"www/extensions/30idres.js":                             wwwExtensions30idresJs,
	"www/extensions/30ytplayer.js":                          wwwExtensions30ytplayerJs,
	"www/extensions/40incfilter.js":                         wwwExtensions40incfilterJs,
	"www/extensions/40textarea.js":                          wwwExtensions40textareaJs,
	"www/extensions/README":                                 wwwExtensionsReadme,
	"www/favicon.ico":                                       wwwFaviconIco,
	"www/gou.png":                                           wwwGouPng,
	"www/jquery/MIT-LICENSE.txt":                            wwwJqueryMitLicenseTxt,
	"www/jquery/jquery.lazy.min.js":                         wwwJqueryJqueryLazyMinJs,
	"www/jquery/jquery.min.js":                              wwwJqueryJqueryMinJs,
	"www/jquery/spoiler/authors.txt":                        wwwJquerySpoilerAuthorsTxt,
	"www/jquery/spoiler/spoiler.min.js":                     wwwJquerySpoilerSpoilerMinJs,
	"www/rss1.xsl":                                          wwwRss1Xsl,
	"www/x.gif":                                             wwwXGif,
	"file/initnode.txt":                                     fileInitnodeTxt,
	"file/message-en.txt":                                   fileMessageEnTxt,
	"file/message-ja.txt":                                   fileMessageJaTxt,
	"file/motd.txt":                                         fileMotdTxt,
	"file/node_allow.txt":                                   fileNode_allowTxt,
	"file/node_deny.txt":                                    fileNode_denyTxt,
	"file/saku.ini":                                         fileSakuIni,
	"file/spam.txt":                                         fileSpamTxt,
	"gou_template/2ch_error.txt":                            gou_template2ch_errorTxt,
	"gou_template/delete_file.txt":                          gou_templateDelete_fileTxt,
	"gou_template/delete_record.txt":                        gou_templateDelete_recordTxt,
	"gou_template/edit_tag.txt":                             gou_templateEdit_tagTxt,
	"gou_template/footer.txt":                               gou_templateFooterTxt,
	"gou_template/gateway_link.txt":                         gou_templateGateway_linkTxt,
	"gou_template/header.txt":                               gou_templateHeaderTxt,
	"gou_template/index_list.txt":                           gou_templateIndex_listTxt,
	"gou_template/jump.txt":                                 gou_templateJumpTxt,
	"gou_template/list_item.txt":                            gou_templateList_itemTxt,
	"gou_template/menubar.txt":                              gou_templateMenubarTxt,
	"gou_template/new_element_form.txt":                     gou_templateNew_element_formTxt,
	"gou_template/page_navi.txt":                            gou_templatePage_naviTxt,
	"gou_template/paragraph.txt":                            gou_templateParagraphTxt,
	"gou_template/post_form.txt":                            gou_templatePost_formTxt,
	"gou_template/record.txt":                               gou_templateRecordTxt,
	"gou_template/remove_file_form.txt":                     gou_templateRemove_file_formTxt,
	"gou_template/rss1.txt":                                 gou_templateRss1Txt,
	"gou_template/search_form.txt":                          gou_templateSearch_formTxt,
	"gou_template/status.txt":                               gou_templateStatusTxt,
	"gou_template/thread_bottom.txt":                        gou_templateThread_bottomTxt,
	"gou_template/thread_tags.txt":                          gou_templateThread_tagsTxt,
	"gou_template/thread_top.txt":                           gou_templateThread_topTxt,
	"gou_template/top.txt":                                  gou_templateTopTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"file": {nil, map[string]*bintree{
		"initnode.txt":   {fileInitnodeTxt, map[string]*bintree{}},
		"message-en.txt": {fileMessageEnTxt, map[string]*bintree{}},
		"message-ja.txt": {fileMessageJaTxt, map[string]*bintree{}},
		"motd.txt":       {fileMotdTxt, map[string]*bintree{}},
		"node_allow.txt": {fileNode_allowTxt, map[string]*bintree{}},
		"node_deny.txt":  {fileNode_denyTxt, map[string]*bintree{}},
		"saku.ini":       {fileSakuIni, map[string]*bintree{}},
		"spam.txt":       {fileSpamTxt, map[string]*bintree{}},
	}},
	"gou_template": {nil, map[string]*bintree{
		"2ch_error.txt":        {gou_template2ch_errorTxt, map[string]*bintree{}},
		"delete_file.txt":      {gou_templateDelete_fileTxt, map[string]*bintree{}},
		"delete_record.txt":    {gou_templateDelete_recordTxt, map[string]*bintree{}},
		"edit_tag.txt":         {gou_templateEdit_tagTxt, map[string]*bintree{}},
		"footer.txt":           {gou_templateFooterTxt, map[string]*bintree{}},
		"gateway_link.txt":     {gou_templateGateway_linkTxt, map[string]*bintree{}},
		"header.txt":           {gou_templateHeaderTxt, map[string]*bintree{}},
		"index_list.txt":       {gou_templateIndex_listTxt, map[string]*bintree{}},
		"jump.txt":             {gou_templateJumpTxt, map[string]*bintree{}},
		"list_item.txt":        {gou_templateList_itemTxt, map[string]*bintree{}},
		"menubar.txt":          {gou_templateMenubarTxt, map[string]*bintree{}},
		"new_element_form.txt": {gou_templateNew_element_formTxt, map[string]*bintree{}},
		"page_navi.txt":        {gou_templatePage_naviTxt, map[string]*bintree{}},
		"paragraph.txt":        {gou_templateParagraphTxt, map[string]*bintree{}},
		"post_form.txt":        {gou_templatePost_formTxt, map[string]*bintree{}},
		"record.txt":           {gou_templateRecordTxt, map[string]*bintree{}},
		"remove_file_form.txt": {gou_templateRemove_file_formTxt, map[string]*bintree{}},
		"rss1.txt":             {gou_templateRss1Txt, map[string]*bintree{}},
		"search_form.txt":      {gou_templateSearch_formTxt, map[string]*bintree{}},
		"status.txt":           {gou_templateStatusTxt, map[string]*bintree{}},
		"thread_bottom.txt":    {gou_templateThread_bottomTxt, map[string]*bintree{}},
		"thread_tags.txt":      {gou_templateThread_tagsTxt, map[string]*bintree{}},
		"thread_top.txt":       {gou_templateThread_topTxt, map[string]*bintree{}},
		"top.txt":              {gou_templateTopTxt, map[string]*bintree{}},
	}},
	"www": {nil, map[string]*bintree{
		"00default.css":     {www00defaultCss, map[string]*bintree{}},
		"00initialize.js":   {www00initializeJs, map[string]*bintree{}},
		"20jump.js":         {www20jumpJs, map[string]*bintree{}},
		"20lazyimg.js":      {www20lazyimgJs, map[string]*bintree{}},
		"20localtime.js":    {www20localtimeJs, map[string]*bintree{}},
		"20popup.js":        {www20popupJs, map[string]*bintree{}},
		"20responce.js":     {www20responceJs, map[string]*bintree{}},
		"20tagedit.js":      {www20tageditJs, map[string]*bintree{}},
		"20textarea.js":     {www20textareaJs, map[string]*bintree{}},
		"21resanchor.js":    {www21resanchorJs, map[string]*bintree{}},
		"40recform.js":      {www40recformJs, map[string]*bintree{}},
		"41postadvanced.js": {www41postadvancedJs, map[string]*bintree{}},
		"arazuki_saku.png":  {wwwArazuki_sakuPng, map[string]*bintree{}},
		"bootstrap": {nil, map[string]*bintree{
			"css": {nil, map[string]*bintree{
				"bootstrap.min.css": {wwwBootstrapCssBootstrapMinCss, map[string]*bintree{}},
			}},
			"fonts": {nil, map[string]*bintree{
				"glyphicons-halflings-regular.eot":  {wwwBootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg":  {wwwBootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf":  {wwwBootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": {wwwBootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
			}},
			"js": {nil, map[string]*bintree{
				"bootstrap.min.js": {wwwBootstrapJsBootstrapMinJs, map[string]*bintree{}},
			}},
		}},
		"extensions": {nil, map[string]*bintree{
			"20imgpopup.js":   {wwwExtensions20imgpopupJs, map[string]*bintree{}},
			"20imgspoiler.js": {wwwExtensions20imgspoilerJs, map[string]*bintree{}},
			"20localtime.js":  {wwwExtensions20localtimeJs, map[string]*bintree{}},
			"30addlinks.js":   {wwwExtensions30addlinksJs, map[string]*bintree{}},
			"30admin.js":      {wwwExtensions30adminJs, map[string]*bintree{}},
			"30filename.js":   {wwwExtensions30filenameJs, map[string]*bintree{}},
			"30filterlink.js": {wwwExtensions30filterlinkJs, map[string]*bintree{}},
			"30idres.js":      {wwwExtensions30idresJs, map[string]*bintree{}},
			"30ytplayer.js":   {wwwExtensions30ytplayerJs, map[string]*bintree{}},
			"40incfilter.js":  {wwwExtensions40incfilterJs, map[string]*bintree{}},
			"40textarea.js":   {wwwExtensions40textareaJs, map[string]*bintree{}},
			"README":          {wwwExtensionsReadme, map[string]*bintree{}},
		}},
		"favicon.ico": {wwwFaviconIco, map[string]*bintree{}},
		"gou.png":     {wwwGouPng, map[string]*bintree{}},
		"jquery": {nil, map[string]*bintree{
			"MIT-LICENSE.txt":    {wwwJqueryMitLicenseTxt, map[string]*bintree{}},
			"jquery.lazy.min.js": {wwwJqueryJqueryLazyMinJs, map[string]*bintree{}},
			"jquery.min.js":      {wwwJqueryJqueryMinJs, map[string]*bintree{}},
			"spoiler": {nil, map[string]*bintree{
				"authors.txt":    {wwwJquerySpoilerAuthorsTxt, map[string]*bintree{}},
				"spoiler.min.js": {wwwJquerySpoilerSpoilerMinJs, map[string]*bintree{}},
			}},
		}},
		"rss1.xsl": {wwwRss1Xsl, map[string]*bintree{}},
		"x.gif":    {wwwXGif, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
